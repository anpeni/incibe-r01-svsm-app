name: BackStage builder
on:
  workflow_dispatch:
  create:
    branches:
      - stable-*
      - release-*
  push:
    branches:
      - main
      - release-*
  pull_request:
    branches:
      - stable-*
    types:
      - closed

env:
  AWS_REGION: eu-west-1
  AWS_ECR_REPOSITORY: cicd/backstage

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate environment variables
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "MY_COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV
          echo "MY_BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF_NAME//\//-}}" >> $GITHUB_ENV
          
      - name: Generate environment variables
        id: v-image
        run: echo "MY_IMAGE_VERSION=${{ env.AWS_ECR_REPOSITORY }}:${{ env.MY_BRANCH_NAME }}-${{ env.MY_COMMIT_SHORT_SHA }}" >> $GITHUB_ENV

      - name: Generate Token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        id: generate-token
        with:
          app_id: "${{ secrets.BOT_APP_ID }}"
          private_key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/

      - name: Install yarn
        uses: backstage/actions/yarn-install@v0.6.4
        with:
          cache-prefix: ${{ runner.os }}-v${{ matrix.node-version }}

      - name: Compile
        run: yarn tsc
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Build backend
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: yarn build:backend --config ../../app-config.yaml

      - name: Scan Dockerfile with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: ./packages/backend/Dockerfile
          severity: "CRITICAL"
          format: "sarif"
          output: "results-dockerfile.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "results-dockerfile.sarif"
          category: "docker-file"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/backend/Dockerfile
          load: true
          tags: ${{ env.AWS_ECR_REPOSITORY }}

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.AWS_ECR_REPOSITORY }}
          severity: "CRITICAL"
          format: "sarif"
          output: "results-dockerimage.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "results-dockerimage.sarif"
          category: "docker-image"

      - name: Push to ECR
        if: github.ref == 'main' || github.ref == 'refs/heads/release-*' || github.ref == 'refs/heads/stable-*'
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          region: ${{ env.AWS_REGION }}
          local-image: ${{ env.AWS_ECR_REPOSITORY }}
          image: ${{ env.MY_IMAGE_VERSION }}

      - name: Trigger deploy
        if: github.ref == 'main' || github.ref == 'refs/heads/release-*' || github.ref == 'refs/heads/stable-*'
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ steps.generate-token.outputs.token }}" https://api.github.com/repos/DDC-NEORIS/incibe-r01-svsm-app/actions/workflows/backstage-deploy.yml/dispatches -d '{"ref":"${{ github.ref }}", "inputs": {"image_version": "${{ env.MY_IMAGE_VERSION }}"}}'