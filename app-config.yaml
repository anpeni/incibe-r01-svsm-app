# ====================================================================================
#  Backstage frontend configuration
# ====================================================================================
app:
  title: NEORIS monitor
  baseUrl: http://localhost:3000


organization:
  name: NEORIS
# ====================================================================================
#  Backstage backend configuration
# ====================================================================================
backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    #dfdf
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    # host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    frame-src:
      [
        "'self'",
        'https://grafana.aws.neoris.cloud',
        'https://dex.aws.neoris.cloud',
        'https://login.microsoftonline.com/',
      ]
  #   img-src: ["'self'", 'data:', 'https://backstage.io']
  #   # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
  #   # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'external' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

# ====================================================================================
#  Backstage authentication configuration
# ====================================================================================
auth:
  environment: development
  session:
    secret: ${SESSION_SECRET}
  providers:
    dex:
      development:
        metadataUrl: https://dex.aws.neoris.cloud/.well-known/openid-configuration
        clientId: backstage
        clientSecret: ${SECRET_BACKSTAGE_OAUTH_CLIENT_SECRET}
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: SVSM # TODO: Change this to real name
    email: svsm@incibe.com
  defaultCommitMessage: 'Initial commit'

# ====================================================================================
#  Backstage catalog configuration
# ====================================================================================
catalog:
  readonly: false
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: github-discovery
      target: https://github.com/anpeni
    - type: file
      target: ../../catalog-neoris/catalog-info.yaml
    # - type: file
    #   target: ../../catalog-neoris/scaffolder-templates/springboot-grpc-template/template.yaml
    - type: file
      target: ../../catalog-neoris/scaffolder-templates/remote-templates.yaml
      rules:
        - allow: [Template]


# ====================================================================================
#  Backstage proxy configuration
# ====================================================================================
proxy:
  '/grafana/api':
    target: ${URL_GRAFANA}
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN_ACCESS}
  '/prometheus/api':
    target: ${URL_PROMETHEUS}
    secure: false
    #changeOrigin: true
    #secure: true
    #headers:
    #  Authorization: $YOUR_AUTH_TOKEN_IF_PROMETHEUS_IS_SECURED
  '/bitbucketci':
    target: https://api.bitbucket.org/2.0/
    headers:
      # Basic base64(${BITBUCKET_CLOUD_USERNAME}:${BITBUCKET_CLOUD_APP_PASSWORD})
      Authorization: Basic ${BITBUCKETCI_TOKEN_ACCESS}
  '/circleci/api':
    target: https://circleci.com/api/v1.1
    headers:
      Circle-Token: ${CIRCLECI_AUTH_TOKEN}

# ====================================================================================
#  Backstage integrations configuration
# ====================================================================================
integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
  azure:
    - host: dev.azure.com
      credentials:
        - organizations:
            - ${AZURE_ORGANIZATION} 
          personalAccessToken: ${AZURE_PERSONAL_TOKEN}
grafana:
  # Publicly accessible domain
  domain: https://grafana.aws.neoris.cloud/
  # Is unified alerting enabled in Grafana?
  # See: https://grafana.com/blog/2021/06/14/the-new-unified-alerting-system-for-grafana-everything-you-need-to-know/
  # Optional. Default: false
  unifiedAlerting: false
# Defaults to /prometheus/api and can be omitted if proxy is configured for that url
prometheus:
  proxyPath: /prometheus/api
sonarqube:
  baseUrl: https://sonarcloud.io
  apiKey: ${SONARQUBE_APIKEY}
  instances:
    - name: tracing
      baseUrl: https://sonarcloud.io
      apiKey: ${SONARQUBE_APIKEY}
tekton:
  - name: devsecops
    baseUrl: http://tekton-dashboard.tekton-pipelines.svc.cluster.local:9097
    # authorizationBearerToken: ${AWS_K8S_CADATA}
    dashboardBaseUrl: http://tekton-dashboard.aws.neoris.cloud/

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: ${AWS_K8S_URL}
          name: devsecops
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          skipMetricsLookup: true
          # serviceAccountToken: ${SERVICE_ACCOUNT_TOKEN}
          caData: ${AWS_K8S_CADATA}
jenkins:
  baseUrl: ${URL_JENKINS}
  username: ${JENKINS_USERNAME}
  apiKey: ${JENKINS_APIKEY}

azureDevOps:
  host: dev.azure.com
  token: ${AZURE_PERSONAL_TOKEN}
  organization: ${AZURE_ORGANIZATION}  
